trigger:
- main

pool:
  name: Localhost
  demands:
    - maven
    - docker

variables:
  - group: test


jobs:

####### BuildAndTest ################################################################################################################################

- job: BuildAndTest
  displayName: Build and Test Spring Boot App
  
  steps:

  # Tests and then builds the maven project.
  - task: Maven@3
    inputs:
      mavenPomFile: pom.xml
      goals: clean package
      javaHomeOption: JDKVersion
      mavenVersionOption: Default
      mavenAuthenticateFeed: false
      effectivePomSkip: false
      sonarQubeRunAnalysis: false
    env:
      DATABASE_URL: "localhost"
      DATABASE_USERNAME: "root"
      DATABASE_PASSWORD: "root"
      JWTSECRET: "123456789" # just a test key
      EMAIL_USERNAME: "nothing" # without declaring these env variables it will not run.
      EMAIL_PASSWORD: "nothing" # without declaring these env variables it will not run.

####### Dockerize ###################################################################################################################################

- job: Dockerize
  displayName: Dockerize the learniverse backend
  dependsOn: BuildAndTest
  
  steps:
  - checkout: none

  # Creates a docker image and then runs a container.
  - task: Docker@2
    inputs:
      repository: lc-backend
      command: build
      Dockerfile: Dockerfile
      tags: latest

  # Runs a docker container with the image created above.
  - script: |
      sudo docker run --restart unless-stopped -d --name lc-backend -e DATABASE_URL=localhost -e DATABASE_USERNAME=root -e DATABASE_PASSWORD=root -e JWTSECRET=123456789 -e EMAIL_USERNAME=nothing -e EMAIL_PASSWORD=nothing -p 8080:8080 lc-backend:latest
    displayName: Run Docker container

####### InstallNewmanAndRunPostmanTests ##############################################################################################################

- job: InstallNewmanAndRunPostmanTests
  dependsOn: Dockerize
  displayName: 'Execute Postman Tests'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '21.7.1'
    displayName: 'Install Node.js'
  
  - powershell: npm install -g newman newman-reporter-htmlextra
    displayName: 'Install Newman and HTML Extra Reporter'

  - powershell: |
      New-Item -ItemType Directory -Force -Path "$(Build.SourcesDirectory)\TestResults"
    displayName: 'Create Results Directory'

  - script: |
      newman run "Web-App Courses Collection.postman_collection.json" --environment "Courses Environment.postman_environment.json" --reporters cli,junit,htmlextra ^
      --reporter-junit-export "$(Build.SourcesDirectory)\TestResults\testResults.xml" ^
      --reporter-htmlextra-export "$(Build.SourcesDirectory)\TestResults\testResults.html"
    displayName: 'Run Newman with Postman Collection for Reports'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Build.SourcesDirectory)/TestResults/testResults.xml'
      searchFolder: '$(Build.SourcesDirectory)\TestResults'
      failTaskOnFailedTests: true
      testRunTitle: 'Postman Test Results'
    displayName: 'Publish Postman Test Results'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\TestResults'
      ArtifactName: 'Postman Test Results'
      publishLocation: 'Container'
    displayName: 'Publish Newman Test Results as Artifact'

####### PushDockerImage ###############################################################################################################################

- job: PushDockerImages
  displayName: Pushes images to private container registry
  dependsOn: InstallNewmanAndRunPostmanTests
  
  steps:
  - checkout: none

  # Logs into the private container registry via a source connection
  - task: Docker@2
    displayName: Login to Azure Container Registry
    inputs:
      command: login
      containerRegistry: learniverseconnect

  # Tags the image for pushing them to the private repository in the cloud.
  # Latest tag overwrites the last latest image, so that the server can pull this.
  - script: |
      docker tag lc-backend learniverseconnect.azurecr.io/lc-backend:latest
    displayName: Tag Docker Image

  # Pushes the images to the registry.
  - script: |
        docker push learniverseconnect.azurecr.io/lc-backend:latest
    displayName: Push Docker Image

######## Deploy ########################################################################################################################################

- job: Deploy
  displayName: Deploys the docker to a cloud hosted server
  dependsOn: PushDockerImages

  steps:
  #- checkout: none

  # Logs into Azure via a service connection, and tears down the server if it exists.
  - task: AzureCLI@2
    displayName: Tear down current VM
    inputs:
      azureSubscription: lc-rm
      scriptType: ps
      scriptLocation: inlineScript
      inlineScript: |
        az vm delete --name LC-Web-Server --resource-group LearniverseConnect --yes
        az disk delete --name LC-Web-Server --resource-group LearniverseConnect --yes

  # Deploys a new VM via the VMtemplate.json, it then sets itself up by downloading 
  # docker and azure cli for pulling and running the latest image via a custom script.
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: Create new VM
    inputs:
      azureResourceManagerConnection: lc-rm
      subscriptionId: a2c71318-8b0a-4924-8645-82d4e855bc62
      resourceGroupName: LearniverseConnect
      location: Norway East
      csmFile: $(Build.SourcesDirectory)/VMtemplate.json
      deploymentMode: Incremental
      deploymentName: web-server-deployment

######## Clean #########################################################################################################################################

# Clean always runs wether the pipeline fails or not.
# Deletes the docker images built, and running docker containers.
- job: Clean
  displayName: Clean docker
  dependsOn: 
    - BuildAndTest
    - Dockerize
    - Deploy
  condition: always()

  steps:
  # Deletes the docker image.
  - script: |
        docker rm --force backend-courses-mysql-1
        docker rm --force lc-backend
    displayName: Deletes the running container

  # Deletes the docker container.
  - script: |
      docker rmi lc-backend:latest
    displayName: Remove docker image on agent